"""
 Copyright Â© 2017 Bilal Elmoussaoui <bil.elmoussaoui@gmail.com>

 This file is part of Authenticator.

 Authenticator is free software: you can redistribute it and/or
 modify it under the terms of the GNU General Public License as published
 by the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 Authenticator is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with Authenticator. If not, see <http://www.gnu.org/licenses/>.
"""
from gettext import gettext as _
from gi.repository import Gtk, GLib, Gio, Gdk, GObject

from Authenticator.widgets import Window, WindowView, import_json, export_json
from Authenticator.models import Database, Settings, Clipboard, Logger, Keyring


class Application(Gtk.Application):
    """Authenticator application object."""
    instance = None
    IS_DEVEL = False
    is_locked = GObject.Property(type=bool, default=False)
    profile = GObject.Property(type=str, default='default')

    def __init__(self):
        Gtk.Application.__init__(self,
                                 application_id="@APP_ID@",
                                 flags=Gio.ApplicationFlags.FLAGS_NONE)
        GLib.set_application_name(_("Authenticator") + " @NAME_SUFFIX@")
        GLib.set_prgname("Authenticator")
        self.connect("notify::is-locked", self.__is_locked_changed)
        self.alive = True
        self.proxy = None

        self._menu = Gio.Menu()


    @staticmethod
    def get_default():
        if Application.instance is None:
            Application.instance = Application()
        return Application.instance

    def do_startup(self):
        """Startup the application."""
        # Set the default night mode
        settings = Settings.get_default()

        Gtk.Application.do_startup(self)

        self.__generate_menu()
        self.__setup_actions()

        keyring = Keyring.get_default()
        keyring.can_be_locked = keyring.is_password_enabled() and keyring.has_password()
        self.is_locked = keyring.can_be_locked

        Application.__setup_css()

        # Restore default state
        self.__on_dark_theme_changed()
        self.__on_night_light_changed()
        # Bind signals
        settings.connect("changed::dark-theme", self.__on_dark_theme_changed)
        settings.connect("changed::night-light", self.__on_night_light_changed)


    @staticmethod
    def __setup_css():
        """Setup the CSS and load it."""
        uri = 'resource:///com/github/bilelmoussaoui/Authenticator/style.css'
        provider_file = Gio.File.new_for_uri(uri)
        provider = Gtk.CssProvider()
        screen = Gdk.Screen.get_default()
        context = Gtk.StyleContext()
        provider.load_from_file(provider_file)
        context.add_provider_for_screen(screen, provider,
                                        Gtk.STYLE_PROVIDER_PRIORITY_USER)
        Gtk.IconTheme.get_default().add_resource_path("/com/github/bilelmoussaoui/Authenticator")
        Logger.debug("Loading CSS")

    def __generate_menu(self):
        """Generate application menu."""
        # Lock/Unlock

        lock_content = Gio.Menu.new()
        lock_content.append_item(Gio.MenuItem.new(_("Lock the application"), "app.lock"))
        self._menu.append_item(Gio.MenuItem.new_section(None, lock_content))

        # Backup
        backup_content = Gio.Menu.new()
        import_menu = Gio.Menu.new()
        export_menu = Gio.Menu.new()

        import_menu.append_item(Gio.MenuItem.new(_("from a plain-text JSON file"), "app.import_json"))
        export_menu.append_item(Gio.MenuItem.new(_("in a plain-text JSON file"), "app.export_json"))

        backup_content.insert_submenu(0, _("Restore"), import_menu)
        backup_content.insert_submenu(1, _("Backup"), export_menu)

        backup_section = Gio.MenuItem.new_section(None, backup_content)
        self._menu.append_item(backup_section)

        # Main section
        main_content = Gio.Menu.new()
        # Night mode action
        main_content.append_item(Gio.MenuItem.new(_("Preferences"), "app.settings"))
        main_content.append_item(Gio.MenuItem.new(_("Donate"), "app.donate"))
        main_content.append_item(Gio.MenuItem.new(_("Keyboard Shortcuts"), "app.shortcuts"))
        main_content.append_item(Gio.MenuItem.new(_("About Authenticator"), "app.about"))
        help_section = Gio.MenuItem.new_section(None, main_content)
        self._menu.append_item(help_section)

    def __setup_actions(self):
        self.__add_action("about", self.__on_about)
        self.__add_action("shortcuts", self.__on_shortcuts)
        self.__add_action("donate", self.__on_donate)
        self.__add_action("quit", self.__on_quit)
        self.__add_action("settings", self.__on_settings, "is_locked")
        self.__add_action("import_json", self.__on_import_json, "is_locked")
        self.__add_action("export_json", self.__on_export_json, "is_locked")
        self.lock_action = self.__add_action("lock", self.__on_lock)
        Keyring.get_default().connect("notify::can-be-locked",
                                        self.__sync_lock_action)

        # Keyboard shortcuts. This includes actions defined in window.py.in
        self.set_accels_for_action("app.shortcuts", ["<Ctrl>question"])
        self.set_accels_for_action("app.quit", ["<Ctrl>Q"])
        self.set_accels_for_action("app.settings", ["<Ctrl>comma"])
        self.set_accels_for_action("win.add-account", ["<Ctrl>N"])
        self.set_accels_for_action("win.toggle-searchbar", ["<Ctrl>F"])

    def __add_action(self, key, callback, prop=None):
        action = Gio.SimpleAction.new(key, None)
        action.connect("activate", callback)
        if prop:
            self.bind_property(prop, action, "enabled", GObject.BindingFlags.INVERT_BOOLEAN)
        self.add_action(action)
        return action

    def do_activate(self, *_):
        """On activate signal override."""
        window = Window.get_default()
        window.set_menu(self._menu)
        window.set_application(self)
        window.connect("delete-event", lambda x, y: self.__on_quit())
        if self.props.profile != 'default':
            window.get_style_context().add_class(self.props.profile)
        self.add_window(window)
        window.show_all()
        window.present()

    def __on_dark_theme_changed(self, *args):
        Gtk.Settings.get_default().set_property("gtk-application-prefer-dark-theme",
                                                Settings.get_default().dark_theme)    

    def __on_night_light_changed(self, *_):
        if Settings.get_default().night_light and not self.proxy:
            bus = Gio.bus_get_sync(Gio.BusType.SESSION, None)
            self.proxy = Gio.DBusProxy.new_sync(bus,
                                            Gio.DBusProxyFlags.NONE,
                                            None,
                                            "org.gnome.SettingsDaemon.Color",
                                            "/org/gnome/SettingsDaemon/Color",
                                            "org.gnome.SettingsDaemon.Color",
                                            None)
            system_value = self.proxy.get_cached_property('NightLightActive')
            self.proxy.connect("g-properties-changed", self.__night_light_changed)
            Gtk.Settings.get_default().set_property("gtk-application-prefer-dark-theme",
                                                    system_value)

            return True
        else:
            self.proxy = None
            self.__on_dark_theme_changed()

    def __night_light_changed(self, proxy, gvariant, *_):
        data = gvariant.unpack()
        if 'NightLightActive' in data.keys():
          Gtk.Settings.get_default().set_property("gtk-application-prefer-dark-theme",
                                                    data['NightLightActive'])

    def __sync_lock_action(self, *_):
        keyring = Keyring.get_default()
        self.lock_action.props.enabled = keyring.can_be_locked and not self.is_locked

    def __is_locked_changed(self, *_):
        if self.is_locked:
            Window.get_default().view = WindowView.LOCKED
        else:
            Window.get_default().refresh_view()
        self.__sync_lock_action()

    def __on_lock(self, *_):
        self.set_property("is-locked", True)

    def __on_donate(self, *_):
        librepay_url = "https://liberapay.com/bielmoussaoui"
        Gio.app_info_launch_default_for_uri(librepay_url)

    @staticmethod
    def __on_about(*_):
        """
            Shows about dialog
        """
        builder = Gtk.Builder()
        builder.add_from_resource("/com/github/bilelmoussaoui/Authenticator/about_dialog.ui")
        dialog = builder.get_object("about_dialog")
        dialog.set_transient_for(Window.get_default())
        dialog.run()
        dialog.destroy()

    def __on_shortcuts(self, *_):
        builder = Gtk.Builder()
        builder.add_from_resource("/com/github/bilelmoussaoui/Authenticator/shortcuts.ui")
        dialog = builder.get_object("shortcuts")
        dialog.set_transient_for(Window.get_default())
        dialog.show()

    @staticmethod
    def __on_import_json(*_):
        from .models import BackupJSON
        filename = import_json(Window.get_default())
        if filename:
            BackupJSON.import_file(filename)

    @staticmethod
    def __on_export_json(*_):
        from .models import BackupJSON
        filename = export_json(Window.get_default())
        if filename:
            BackupJSON.export_file(filename)

    @staticmethod
    def __on_settings(*_):
        from .widgets import SettingsWindow
        settings_window = SettingsWindow()
        settings_window.present()
        settings_window.show_all()

    def __on_quit(self, *_):
        """
        Close the application, stops all threads
        and clear clipboard for safety reasons
        """
        Clipboard.clear()
        Window.get_default().close()
        self.quit()

